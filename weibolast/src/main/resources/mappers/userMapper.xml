<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.weiboLast.demo.mapper.userMapper">

    <select id="selectUserByUserNameAndPassword" resultType="java.lang.Long">
        SELECT id FROM user
        WHERE username=#{username} AND password=#{password}
    </select>

    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user(username,gender,password,nickname,create_time)
        VALUES(#{username},#{gender.id},#{password},#{nickname},#{createTime})
    </insert>

    <insert id="insertUserAndTag">
        INSERT INTO customTag(message,user_id)
        VALUES(#{a.message},#{userId})
    </insert>

    <select id="selectUser" resultType="com.weiboLast.demo.pojo.vo.UserVO2">
        SELECT id,username,nickname,password
        FROM user
        WHERE username=#{username}
        AND password=#{password}
    </select>

    <select id="collectAllUserNumber" resultType="java.lang.Long">
        SELECT COUNT(id)
        FROM user
    </select>

    <select id="showUserLists" resultType="com.weiboLast.demo.pojo.vo.UserVO">
        SELECT id,username
        FROM user
        ORDER BY create_time DESC,id DESC
        LIMIT #{pageNumber},#{number}
    </select>

    <update id="updateInfo">
        UPDATE user
        <set>
            <if test="#{userInfo.username}!=null and #{userInfo.username}!=''">
                username=#{userInfo.username},
            </if>
            <if test="#{userInfo.nickname}!=null and #{userInfo.nickname}!=''">
                nickname=#{userInfo.nickname},
            </if>
            <if test="#{userInfo.gender.id}!=null and #{userInfo.gender.id}!=''">
                gender=#{userInfo.gender.id}
            </if>
        </set>
        WHERE id=#{userId}
    </update>

    <update id="deleteUserById">
        UPDATE user
        SET is_alive=false
        WHERE id=#{id}
    </update>

    <update id="updateUserPassword">
        UPDATE user
        SET password=#{pwd.confirmNewPassword}
        WHERE id=#{userId}
    </update>

    <select id="selectPermession" resultType="java.lang.String">
        SELECT p.permession_code
        FROM user as u
        JOIN user_of_roles as ur ON u.id=ur.user_id
        JOIN roles as r ON ur.role_id=r.id
        JOIN role_have_permessions as pr ON r.id=pr.permession_id
        JOIN permession as p ON pr.permession_id=p.id
        WHERE u.id=#{id}
    </select>

    <resultMap id="detailMap" type="com.weiboLast.demo.pojo.vo.weiboIndexVo">
        <id property="id" column="id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="nickname" column="nickname" />
        <result property="createTime" column="createTime" />
        <result property="updateTime" column="updateTime" />
        <collection property="tags" ofType="com.weiboLast.demo.pojo.entity.tag">
            <result property="message" column="message" />
            <result property="description" column="description" />
        </collection>
    </resultMap>
    <select id="selectAllArticlesByUserId" resultMap="detailMap">
        SELECT w.id,w.title,w.content,u.nickname,w.create_time as createTime,
        w.update_time as updateTime,t.tag as message,t.description
        FROM weibo as  w
        JOIN user as u ON u.id=w.user_id
        LEFT JOIN weibo_tag as wt ON w.id=wt.weibo_id
        LEFT JOIN tag as t ON wt.tag_id=t.id
        WHERE u.id=#{userId}
    </select>

    <select id="countAllArticles" resultType="com.weiboLast.demo.pojo.vo.userHasWeiBoVO">
        SELECT u.username,u.nickname,COUNT(w.id) as count
        FROM user as u
        JOIN weibo as w ON u.id=w.user_id
        WHERE u.id=#{user_id}
    </select>

    <resultMap id="selectUserMap" type="com.weiboLast.demo.pojo.vo.UserVO3">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <collection property="tags" ofType="com.weiboLast.demo.pojo.entity.CustomTag">
            <result property="message" column="message" />
        </collection>
    </resultMap>
    <select id="selectUserByUser" resultMap="selectUserMap">
        SELECT u.id,u.username,u.password,
        u.nickname,c.message
        FROM user as u
        LEFT JOIN customtag as c ON u.id=c.user_id
        WHERE u.id=#{id}
    </select>

    <insert id="insertIntoFollows" >
        INSERT INTO user_followings(user_id,following_user_id)
        VALUES(#{userId},#{followsUserId})
    </insert>

    <resultMap id="UserDetailMapper" type="com.weiboLast.demo.pojo.vo.UserDetailInfo">
        <id property="id" column="uid" />
        <result property="username" column="username" />
        <result property="nickname" column="nickname" />
        <result property="createTime" column="createTime" />
        <collection property="tags" ofType="com.weiboLast.demo.pojo.entity.CustomTag">
            <result property="message" column="message" />
        </collection>
        <collection property="followers" ofType="com.weiboLast.demo.pojo.vo.UserVO">
            <id property="id" column="followersId" />
            <result property="username" column="followerName" />
        </collection>
        <collection property="followings" ofType="com.weiboLast.demo.pojo.vo.UserVO" >
            <id property="id" column="followingsId" />
            <result property="username" column="followingName" />
        </collection>
    </resultMap>
    <select id="selectUserInfo" resultMap="UserDetailMapper" >
        SELECT u.id as uid<!--用户id-->,u.username<!--当前用户名称-->,
        u.nickname<!--当前用户的昵称-->,u.create_time as createTime<!--当前用户创建时间-->,
        followers.id as followersId<!--跟随的用户id-->,followers.username as followerName<!--用户跟随名称-->,
        u2.id as followingsId<!--跟随者id号-->,u2.username as followingName<!--跟随着名称-->,
        c.message
        FROM user as u
        LEFT JOIN user_followings as uf ON u.id=uf.user_id
        LEFT JOIN user as followers ON uf.following_user_id=followers.id
        LEFT JOIN user_followings as uf_2 ON u.id=uf_2.following_user_id
        LEFT JOIN user as u2 ON uf_2.user_id=u2.id
        LEFT JOIN customtag as c ON u.id=c.user_id
        WHERE u.id=#{userId}
    </select>

</mapper>
